/**
 * TeleOko v2.0 - –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JavaScript
 * –°–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π WebRTC
 */

document.addEventListener('DOMContentLoaded', function() {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const videoContainer = document.getElementById('video-container');
    const cameraSelect = document.getElementById('cameraSelect');
    const liveBtn = document.getElementById('liveBtn');
    const snapshotBtn = document.getElementById('snapshotBtn');
    const archiveDate = document.getElementById('archiveDate');
    const searchBtn = document.getElementById('searchBtn');
    const timeline = document.getElementById('timeline');
    const recordingsList = document.getElementById('recordingsList');
    const loadingOverlay = document.getElementById('loadingOverlay');
    const loadingMessage = document.getElementById('loadingMessage');
    
    // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    let currentVideoElement = null;
    let currentRTCPeerConnection = null;
    let currentStream = null;
    let recordings = [];
    let connectionStatus = 'offline';
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ñ–æ—Ä–º–∞—Ç dd.mm.yyyy)
    const today = new Date();
    const dd = String(today.getDate()).padStart(2, '0');
    const mm = String(today.getMonth() + 1).padStart(2, '0');
    const yyyy = today.getFullYear();
    archiveDate.value = dd + '.' + mm + '.' + yyyy;
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    function showLoading(message) {
        if (!message) message = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        loadingMessage.textContent = message;
        loadingOverlay.style.display = 'flex';
    }
    
    /**
     * –°–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    function hideLoading() {
        loadingOverlay.style.display = 'none';
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    function updateConnectionStatus(status) {
        connectionStatus = status;
        const statusElement = document.querySelector('.connection-status');
        if (statusElement) {
            statusElement.className = 'connection-status ' + status;
            statusElement.textContent = status === 'online' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ';
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
     */
    function showError(container, message) {
        container.innerHTML = '<div class="error"><p>‚ùå ' + message + '</p></div>';
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
     */
    function formatDateTime(dateTimeString) {
        try {
            const date = new Date(dateTimeString);
            return date.toLocaleString('ru-RU', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        } catch (e) {
            return dateTimeString;
        }
    }
    
    /**
     * –†–∞—Å—á–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏
     */
    function calculateDuration(startTime, endTime) {
        try {
            const start = new Date(startTime);
            const end = new Date(endTime);
            const diffMs = end - start;
            
            const hours = Math.floor(diffMs / (1000 * 60 * 60));
            const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((diffMs % (1000 * 60)) / 1000);
            
            if (hours > 0) {
                return hours + ':' + minutes.toString().padStart(2, '0') + ':' + seconds.toString().padStart(2, '0');
            }
            return minutes + ':' + seconds.toString().padStart(2, '0');
        } catch (e) {
            return '00:00';
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –ø—Ä—è–º–æ–≥–æ —ç—Ñ–∏—Ä–∞
     */
    async function startLiveStream() {
        const channelId = cameraSelect.value;
        if (!channelId) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
            return;
        }
        
        showLoading('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–º–µ—Ä–µ...');
        stopCurrentStream();
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–µ
            const streamResponse = await fetch('/api/stream/' + channelId);
            if (!streamResponse.ok) {
                throw new Error('HTTP ' + streamResponse.status);
            }
            
            const streamData = await streamResponse.json();
            
            if (streamData.type === 'webrtc') {
                await startWebRTCStream(channelId, streamData);
            } else {
                // –î–ª—è RTSP –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                showError(videoContainer, 'WebRTC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VLC –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ RTSP: ' + streamData.rtsp_url);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä—è–º–æ–≥–æ —ç—Ñ–∏—Ä–∞:', error);
            showError(videoContainer, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–º–µ—Ä–µ: ' + error.message);
            updateConnectionStatus('offline');
        } finally {
            hideLoading();
        }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ WebRTC –ø–æ—Ç–æ–∫–∞
     */
    async function startWebRTCStream(channelId, streamData) {
        try {
            // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
            const videoElement = document.createElement('video');
            videoElement.autoplay = true;
            videoElement.playsInline = true;
            videoElement.muted = true;
            videoElement.style.width = '100%';
            videoElement.style.height = '100%';
            videoElement.style.objectFit = 'contain';
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebRTC —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ STUN —Å–µ—Ä–≤–µ—Ä–∞–º–∏
            const pc = new RTCPeerConnection({
                iceServers: [
                    { urls: 'stun:stun.l.google.com:19302' },
                    { urls: 'stun:stun1.l.google.com:19302' },
                    { urls: 'stun:stun2.l.google.com:19302' }
                ],
                iceCandidatePoolSize: 10
            });
            
            currentRTCPeerConnection = pc;
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ WebRTC —Å–æ–±—ã—Ç–∏–π
            pc.ontrack = function(event) {
                console.log('üì∫ –ü–æ–ª—É—á–µ–Ω –º–µ–¥–∏–∞-—Ç—Ä–µ–∫:', event.track.kind);
                if (event.streams && event.streams[0]) {
                    videoElement.srcObject = event.streams[0];
                    currentStream = event.streams[0];
                    updateConnectionStatus('online');
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                    videoElement.onloadedmetadata = function() {
                        console.log('üìê –í–∏–¥–µ–æ —Ä–∞–∑–º–µ—Ä: ' + videoElement.videoWidth + 'x' + videoElement.videoHeight);
                    };
                }
            };
            
            pc.oniceconnectionstatechange = function() {
                console.log('üîå ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', pc.iceConnectionState);
                const connectionStates = {
                    'checking': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...',
                    'connected': '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ',
                    'completed': '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ', 
                    'disconnected': '–û—Ç–∫–ª—é—á–µ–Ω–æ',
                    'failed': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
                    'closed': '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ'
                };
                
                const statusText = connectionStates[pc.iceConnectionState] || pc.iceConnectionState;
                console.log('üì° –°—Ç–∞—Ç—É—Å: ' + statusText);
                
                if (pc.iceConnectionState === 'connected' || pc.iceConnectionState === 'completed') {
                    updateConnectionStatus('online');
                } else if (pc.iceConnectionState === 'disconnected' || pc.iceConnectionState === 'failed' || pc.iceConnectionState === 'closed') {
                    updateConnectionStatus('offline');
                }
            };
            
            pc.onicecandidate = function(event) {
                if (event.candidate) {
                    console.log('üßä ICE –∫–∞–Ω–¥–∏–¥–∞—Ç:', event.candidate.type);
                }
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∏–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ
            pc.addTransceiver('video', { direction: 'recvonly' });
            
            // –°–æ–∑–¥–∞–µ–º SDP offer
            const offer = await pc.createOffer({
                offerToReceiveVideo: true,
                offerToReceiveAudio: false,
                voiceActivityDetection: false
            });
            
            await pc.setLocalDescription(offer);
            console.log('üìã SDP Offer —Å–æ–∑–¥–∞–Ω');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º offer –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await fetch('/api/webrtc/offer?channel=' + channelId, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    type: offer.type,
                    sdp: offer.sdp
                })
            });
            
            if (!response.ok) {
                throw new Error('HTTP ' + response.status + ': ' + response.statusText);
            }
            
            const answer = await response.json();
            console.log('üì® –ü–æ–ª—É—á–µ–Ω SDP Answer');
            
            if (answer.error) {
                throw new Error(answer.error);
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            if (answer.sdp) {
                await pc.setRemoteDescription(new RTCSessionDescription({
                    type: answer.type || 'answer',
                    sdp: answer.sdp
                }));
                console.log('‚úÖ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            videoContainer.innerHTML = '';
            videoContainer.appendChild(videoElement);
            currentVideoElement = videoElement;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
            const infoPanel = document.createElement('div');
            infoPanel.className = 'video-info-panel';
            infoPanel.innerHTML = 
                '<div class="video-info">' +
                    '<span>üì∫ ' + (streamData.channel_name || '–ö–∞–Ω–∞–ª ' + channelId) + '</span>' +
                    '<span>üî¥ –ü—Ä—è–º–æ–π —ç—Ñ–∏—Ä</span>' +
                    '<span id="video-quality">üìê –ó–∞–≥—Ä—É–∑–∫–∞...</span>' +
                '</div>';
            videoContainer.appendChild(infoPanel);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–∏–¥–µ–æ
            videoElement.addEventListener('loadedmetadata', function() {
                const qualityInfo = document.getElementById('video-quality');
                if (qualityInfo) {
                    qualityInfo.textContent = 'üìê ' + videoElement.videoWidth + 'x' + videoElement.videoHeight;
                }
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∏–¥–µ–æ
            videoElement.addEventListener('error', function(e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ:', e);
                updateConnectionStatus('offline');
            });
            
        } catch (error) {
            console.error('‚ùå WebRTC –æ—à–∏–±–∫–∞:', error);
            throw new Error('WebRTC –æ—à–∏–±–∫–∞: ' + error.message);
        }
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞
     */
    function stopCurrentStream() {
        if (currentRTCPeerConnection) {
            currentRTCPeerConnection.close();
            currentRTCPeerConnection = null;
        }
        
        if (currentStream) {
            currentStream.getTracks().forEach(function(track) {
                track.stop();
            });
            currentStream = null;
        }
        
        if (currentVideoElement) {
            currentVideoElement.srcObject = null;
            currentVideoElement = null;
        }
        
        updateConnectionStatus('offline');
    }
    
    /**
     * –ü–æ–∏—Å–∫ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
     */
    async function searchRecordings() {
        const channelId = cameraSelect.value;
        const date = archiveDate.value;
        
        if (!channelId || !date) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏ –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞');
            return;
        }
        
        showLoading('–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π...');
        recordingsList.innerHTML = '<div class="loading">–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π...</div>';
        timeline.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã...</div>';
        
        try {
            const response = await fetch('/api/recordings?channel=' + channelId + '&start=' + date + '&end=' + date);
            
            if (!response.ok) {
                throw new Error('HTTP ' + response.status);
            }
            
            const data = await response.json();
            
            if (data.error) {
                throw new Error(data.error);
            }
            
            recordings = data.recordings || [];
            displayRecordings(recordings);
            displayTimeline(recordings, date);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π:', error);
            showError(recordingsList, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏: ' + error.message);
            showError(timeline, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã: ' + error.message);
        } finally {
            hideLoading();
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
     */
    function displayRecordings(recordings) {
        recordingsList.innerHTML = '';
        
        if (!recordings || recordings.length === 0) {
            recordingsList.innerHTML = '<div class="recordings-empty">üìÅ –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
            return;
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        recordings.sort(function(a, b) {
            return new Date(b.StartTime) - new Date(a.StartTime);
        });
        
        recordings.forEach(function(recording) {
            const recordingItem = document.createElement('div');
            recordingItem.className = 'recording-item';
            
            const startTime = formatDateTime(recording.StartTime);
            const endTime = formatDateTime(recording.EndTime);
            const duration = calculateDuration(recording.StartTime, recording.EndTime);
            
            recordingItem.innerHTML = 
                '<div class="recording-info">' +
                    '<span class="recording-time">üìÖ ' + startTime + '</span>' +
                    '<span class="recording-duration">‚è±Ô∏è ' + duration + '</span>' +
                    '<span class="recording-end">üèÅ ' + endTime + '</span>' +
                '</div>' +
                '<div class="recording-actions">' +
                    '<button class="play-btn primary-btn" onclick="playRecording(\'' + recording.StartTime + '\', \'' + recording.EndTime + '\', \'' + recording.Channel + '\')">' +
                        '‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏' +
                    '</button>' +
                '</div>';
            
            recordingsList.appendChild(recordingItem);
        });
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
     */
    function displayTimeline(recordings, date) {
        timeline.innerHTML = '';
        
        if (!recordings || recordings.length === 0) {
            timeline.innerHTML = '<div class="timeline-empty">üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>';
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
        const timelineContainer = document.createElement('div');
        timelineContainer.className = 'timeline-container';
        timelineContainer.style.position = 'relative';
        timelineContainer.style.height = '80px';
        timelineContainer.style.background = '#f5f5f5';
        timelineContainer.style.borderRadius = '4px';
        timelineContainer.style.overflow = 'hidden';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤—ã–µ –º–µ—Ç–∫–∏
        for (let hour = 0; hour < 24; hour += 2) {
            const timeLabel = document.createElement('div');
            timeLabel.className = 'time-label';
            timeLabel.style.position = 'absolute';
            timeLabel.style.left = ((hour / 24) * 100) + '%';
            timeLabel.style.top = '5px';
            timeLabel.style.fontSize = '10px';
            timeLabel.style.color = '#666';
            timeLabel.style.transform = 'translateX(-50%)';
            timeLabel.textContent = hour.toString().padStart(2, '0') + ':00';
            timelineContainer.appendChild(timeLabel);
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —à–∫–∞–ª–µ
        const dateParts = date.split('.');
        const dayStart = new Date(dateParts[2] + '-' + dateParts[1] + '-' + dateParts[0] + 'T00:00:00');
        const dayEnd = new Date(dateParts[2] + '-' + dateParts[1] + '-' + dateParts[0] + 'T23:59:59');
        const dayDuration = dayEnd - dayStart;
        
        recordings.forEach(function(recording, index) {
            const startTime = new Date(recording.StartTime);
            const endTime = new Date(recording.EndTime);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —à–∏—Ä–∏–Ω—É —Å–µ–≥–º–µ–Ω—Ç–∞
            const startPosition = ((startTime - dayStart) / dayDuration) * 100;
            const width = ((endTime - startTime) / dayDuration) * 100;
            
            if (startPosition >= 0 && startPosition <= 100) {
                const segment = document.createElement('div');
                segment.className = 'timeline-segment';
                segment.style.position = 'absolute';
                segment.style.left = Math.max(0, startPosition) + '%';
                segment.style.width = Math.min(width, 100 - startPosition) + '%';
                segment.style.height = '30px';
                segment.style.top = '35px';
                segment.style.background = 'hsl(' + ((index * 137.5) % 360) + ', 70%, 50%)';
                segment.style.cursor = 'pointer';
                segment.style.borderRadius = '2px';
                segment.style.boxShadow = '0 1px 3px rgba(0,0,0,0.3)';
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
                segment.title = formatDateTime(recording.StartTime) + ' - ' + formatDateTime(recording.EndTime);
                
                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
                segment.onclick = function() {
                    playRecording(recording.StartTime, recording.EndTime, recording.Channel);
                };
                
                timelineContainer.appendChild(segment);
            }
        });
        
        timeline.appendChild(timelineContainer);
    }
    
    /**
     * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏
     */
    window.playRecording = async function(startTime, endTime, channelId) {
        showLoading('–ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏...');
        stopCurrentStream();
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            const response = await fetch('/api/playback-url?channel=' + channelId + '&start=' + startTime + '&end=' + endTime);
            
            if (!response.ok) {
                throw new Error('HTTP ' + response.status);
            }
            
            const data = await response.json();
            
            if (data.error) {
                throw new Error(data.error);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± RTSP URL
            videoContainer.innerHTML = 
                '<div class="playback-info-container">' +
                    '<div class="playback-info">' +
                        '<h3>üìº –ê—Ä—Ö–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å</h3>' +
                        '<p><strong>–í—Ä–µ–º—è:</strong> ' + formatDateTime(startTime) + ' - ' + formatDateTime(endTime) + '</p>' +
                        '<p><strong>–ö–∞–Ω–∞–ª:</strong> ' + channelId + '</p>' +
                        '<p><strong>RTSP URL:</strong></p>' +
                        '<code style="word-break: break-all; background: #f5f5f5; padding: 10px; border-radius: 4px; display: block; margin: 10px 0;">' +
                            data.url +
                        '</code>' +
                        '<p><em>üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VLC Player –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —ç—Ç–æ–≥–æ URL</em></p>' +
                        '<button onclick="copyToClipboard(\'' + data.url + '\')" class="primary-btn" style="margin-top: 10px;">' +
                            'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL' +
                        '</button>' +
                    '</div>' +
                '</div>';
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞:', error);
            showError(videoContainer, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å—å: ' + error.message);
        } finally {
            hideLoading();
        }
    };
    
    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
     */
    window.copyToClipboard = function(text) {
        if (navigator.clipboard) {
            navigator.clipboard.writeText(text).then(function() {
                alert('URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
            }).catch(function() {
                fallbackCopyToClipboard(text);
            });
        } else {
            fallbackCopyToClipboard(text);
        }
    };
    
    function fallbackCopyToClipboard(text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        try {
            document.execCommand('copy');
            alert('URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        } catch (err) {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é.');
        }
        document.body.removeChild(textArea);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Å –∫–∞–º–µ—Ä—ã
     */
    async function takeSnapshot() {
        const channelId = cameraSelect.value;
        if (!channelId) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞');
            return;
        }
        
        try {
            showLoading('–°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞...');
            
            const response = await fetch('/api/snapshot/' + channelId);
            if (!response.ok) {
                throw new Error('HTTP ' + response.status);
            }
            
            // –°–æ–∑–¥–∞–µ–º blob –∏–∑ –æ—Ç–≤–µ—Ç–∞
            const blob = await response.blob();
            const imageUrl = URL.createObjectURL(blob);
            
            // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const link = document.createElement('a');
            link.href = imageUrl;
            link.download = 'snapshot_' + channelId + '_' + new Date().toISOString().replace(/[:.]/g, '-') + '.jpg';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
            URL.revokeObjectURL(imageUrl);
            
            alert('–°–Ω–∏–º–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–Ω–∏–º–æ–∫: ' + error.message);
        } finally {
            hideLoading();
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    async function checkSystemStatus() {
        try {
            const response = await fetch('/api/info');
            if (response.ok) {
                const data = await response.json();
                updateConnectionStatus(data.status || 'online');
            } else {
                updateConnectionStatus('offline');
            }
        } catch (error) {
            updateConnectionStatus('offline');
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    function initEventHandlers() {
        // –ö–Ω–æ–ø–∫–∞ –ø—Ä—è–º–æ–≥–æ —ç—Ñ–∏—Ä–∞
        if (liveBtn) {
            liveBtn.addEventListener('click', startLiveStream);
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Å–Ω–∏–º–∫–∞
        if (snapshotBtn) {
            snapshotBtn.addEventListener('click', takeSnapshot);
        }
        
        // –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π
        if (searchBtn) {
            searchBtn.addEventListener('click', searchRecordings);
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', function() {
            stopCurrentStream();
        });
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Ä–∞–∑—Ä—ã–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        setInterval(function() {
            if (currentRTCPeerConnection && connectionStatus === 'online') {
                fetch('/api/ping').catch(function() {});
            }
        }, 30000);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    function init() {
        console.log('üöÄ TeleOko v2.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        checkSystemStatus();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        initEventHandlers();
        
        // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        setInterval(checkSystemStatus, 30000);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (videoContainer) {
            videoContainer.innerHTML = 
                '<div class="placeholder">' +
                    '<div class="placeholder-icon">üìπ</div>' +
                    '<h3>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TeleOko</h3>' +
                    '<p>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä—è–º–æ–π —ç—Ñ–∏—Ä" –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</p>' +
                    '<p><small>–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä—Ö–∏–≤–∞</small></p>' +
                '</div>';
        }
    }
    
    // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    init();
});