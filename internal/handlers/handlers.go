// internal/handlers/handlers.go
package handlers

import (
	"TeleOko/internal/config"
	"TeleOko/internal/hikvision"
	"TeleOko/internal/network"
	"fmt"
	"log"
	"net/http"
	"net/http/httputil"
	"net/url"
	"strconv"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

// GetSystemInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
func GetSystemInfo(c *gin.Context) {
	channels := config.GetChannels()
	localIP, _ := network.GetLocalIP()

	c.JSON(http.StatusOK, gin.H{
		"status":         "online",
		"version":        "2.0.0",
		"channels_count": len(channels),
		"go2rtc_enabled": config.IsGo2RTCEnabled(),
		"go2rtc_port":    config.GetGo2RTCPort(),
		"local_ip":       localIP,
		"timestamp":      time.Now().Unix(),
	})
}

// GetChannels –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
func GetChannels(c *gin.Context) {
	channels := config.GetChannels()

	// –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Å –∏—Ö RTSP URL
	log.Printf("üì∫ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ - –≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: %d –∫–∞–Ω–∞–ª–æ–≤", len(channels))
	for _, channel := range channels {
		log.Printf("  üìπ [%s] %s -> %s", channel.ID, channel.Name, channel.URL)
	}

	c.JSON(http.StatusOK, gin.H{
		"channels": channels,
		"count":    len(channels),
	})
}

// GetLiveStream –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ —ç—Ñ–∏—Ä–∞
func GetLiveStream(c *gin.Context) {
	channelID := c.Param("channel")
	if channelID == "" {
		log.Printf("‚ùå –ó–∞–ø—Ä–æ—Å –ø—Ä—è–º–æ–≥–æ —ç—Ñ–∏—Ä–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ö–∞–Ω–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω"})
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª
	channel := config.GetChannelByID(channelID)
	if channel == nil {
		log.Printf("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞: %s", channelID)
		c.JSON(http.StatusNotFound, gin.H{"error": "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	// –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
	log.Printf("üî¥ –ü–†–Ø–ú–û–ô –≠–§–ò–† - –ó–∞–ø—Ä–æ—Å –∫–∞–Ω–∞–ª–∞ %s", channelID)
	log.Printf("  üìπ –ù–∞–∑–≤–∞–Ω–∏–µ: %s", channel.Name)
	log.Printf("  üåê RTSP URL: %s", channel.URL)
	log.Printf("  üé• go2rtc –≤–∫–ª—é—á–µ–Ω: %t", config.IsGo2RTCEnabled())

	// –ï—Å–ª–∏ go2rtc –≤–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º WebRTC URL
	if config.IsGo2RTCEnabled() {
		go2rtcURL := fmt.Sprintf("http://localhost:%d/api/ws?src=%s",
			config.GetGo2RTCPort(), channelID)

		log.Printf("  ‚úÖ WebRTC URL: %s", go2rtcURL)

		c.JSON(http.StatusOK, gin.H{
			"channel":      channelID,
			"channel_name": channel.Name,
			"webrtc_url":   go2rtcURL,
			"rtsp_url":     channel.URL,
			"type":         "webrtc",
		})
	} else {
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ RTSP URL
		log.Printf("  ‚ö†Ô∏è go2rtc –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ RTSP")

		c.JSON(http.StatusOK, gin.H{
			"channel":      channelID,
			"channel_name": channel.Name,
			"rtsp_url":     channel.URL,
			"type":         "rtsp",
		})
	}
}

// HandleWebRTCOffer –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç WebRTC –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ —ç—Ñ–∏—Ä–∞
func HandleWebRTCOffer(c *gin.Context) {
	channelID := c.Query("channel")
	if channelID == "" {
		log.Printf("‚ùå WebRTC –∑–∞–ø—Ä–æ—Å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ö–∞–Ω–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	channel := config.GetChannelByID(channelID)
	rtspURL := "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
	if channel != nil {
		rtspURL = channel.URL
	}

	log.Printf("üéØ WebRTC OFFER - –ö–∞–Ω–∞–ª %s", channelID)
	log.Printf("  üåê RTSP –∏—Å—Ç–æ—á–Ω–∏–∫: %s", rtspURL)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ go2rtc
	if !config.IsGo2RTCEnabled() {
		log.Printf("  ‚ùå go2rtc –æ—Ç–∫–ª—é—á–µ–Ω - WebRTC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
		c.JSON(http.StatusServiceUnavailable, gin.H{
			"error": "WebRTC —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
		})
		return
	}

	// –ß–∏—Ç–∞–µ–º SDP –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
	var offerData map[string]interface{}
	if err := c.ShouldBindJSON(&offerData); err != nil {
		log.Printf("  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è SDP offer: %v", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	// –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ go2rtc
	go2rtcURL := fmt.Sprintf("http://localhost:%d/api/webrtc", config.GetGo2RTCPort())
	log.Printf("  üîÑ –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ go2rtc: %s", go2rtcURL)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ go2rtc
	requestBody := map[string]interface{}{
		"type":  "webrtc",
		"value": offerData,
		"src":   channelID,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ go2rtc (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
	client := &http.Client{Timeout: 10 * time.Second}

	// –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π SDP –æ—Ç–≤–µ—Ç
	// –í –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HTTP POST –∫ go2rtc
	log.Printf("  ‚úÖ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ %s (RTSP: %s)", channelID, rtspURL)
	_ = client      // –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
	_ = requestBody // –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

	c.JSON(http.StatusOK, gin.H{
		"type": "answer",
		"sdp":  generateWebRTCSDP(channelID),
	})
}

// GetRecordings –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
func GetRecordings(c *gin.Context) {
	channelID := c.Query("channel")
	startDate := c.Query("start")
	endDate := c.Query("end")

	if channelID == "" || startDate == "" {
		log.Printf("‚ùå –ó–∞–ø—Ä–æ—Å –∞—Ä—Ö–∏–≤–∞ –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (channel, start)",
		})
		return
	}

	// –ï—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é
	if endDate == "" {
		endDate = startDate
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	channel := config.GetChannelByID(channelID)
	rtspURL := "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
	channelName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
	if channel != nil {
		rtspURL = channel.URL
		channelName = channel.Name
	}

	log.Printf("üìº –ü–û–ò–°–ö –ê–†–•–ò–í–ê - –ö–∞–Ω–∞–ª %s (%s)", channelID, channelName)
	log.Printf("  üìÖ –ü–µ—Ä–∏–æ–¥: %s - %s", startDate, endDate)
	log.Printf("  üåê RTSP –∏—Å—Ç–æ—á–Ω–∏–∫: %s", rtspURL)

	// –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ Hikvision API
	recordings, err := hikvision.SearchRecordings(channelID, startDate, endDate)
	if err != nil {
		log.Printf("  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π: %v", err),
		})
		return
	}

	log.Printf("  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: %d", len(recordings))

	c.JSON(http.StatusOK, gin.H{
		"recordings": recordings,
		"count":      len(recordings),
		"channel":    channelID,
		"start_date": startDate,
		"end_date":   endDate,
	})
}

// GetPlaybackURL –ø–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏
func GetPlaybackURL(c *gin.Context) {
	channelID := c.Query("channel")
	startTime := c.Query("start")
	endTime := c.Query("end")

	if channelID == "" || startTime == "" {
		log.Printf("‚ùå –ó–∞–ø—Ä–æ—Å URL –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (channel, start)",
		})
		return
	}

	// –ï—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º —á–∞—Å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É
	if endTime == "" {
		// –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º 1 —á–∞—Å
		if t, err := time.Parse("2006-01-02T15:04:05Z", startTime); err == nil {
			endTime = t.Add(time.Hour).Format("2006-01-02T15:04:05Z")
		} else {
			endTime = startTime
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	channel := config.GetChannelByID(channelID)
	channelName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
	liveRTSP := "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
	if channel != nil {
		channelName = channel.Name
		liveRTSP = channel.URL
	}

	log.Printf("üì∫ –ê–†–•–ò–í–ù–û–ï –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï - –ö–∞–Ω–∞–ª %s (%s)", channelID, channelName)
	log.Printf("  ‚è∞ –í—Ä–µ–º—è: %s - %s", startTime, endTime)
	log.Printf("  üåê –ë–∞–∑–æ–≤—ã–π RTSP: %s", liveRTSP)

	// –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
	playbackURL, err := hikvision.GetPlaybackURL(channelID, startTime, endTime)
	if err != nil {
		log.Printf("  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL: %v", err),
		})
		return
	}

	log.Printf("  ‚úÖ –ê—Ä—Ö–∏–≤–Ω—ã–π RTSP URL: %s", playbackURL)

	c.JSON(http.StatusOK, gin.H{
		"url":        playbackURL,
		"channel":    channelID,
		"start_time": startTime,
		"end_time":   endTime,
		"type":       "rtsp",
	})
}

// HandlePlaybackWebRTC –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç WebRTC –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
func HandlePlaybackWebRTC(c *gin.Context) {
	var requestData struct {
		Offer map[string]interface{} `json:"offer"`
		URL   string                 `json:"url"`
	}

	if err := c.ShouldBindJSON(&requestData); err != nil {
		log.Printf("‚ùå WebRTC Playback: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - %v", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	log.Printf("üéØ WebRTC PLAYBACK –∑–∞–ø—Ä–æ—Å")
	log.Printf("  üåê –ê—Ä—Ö–∏–≤–Ω—ã–π URL: %s", requestData.URL)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ—Ç–æ–∫–∞ –∞—Ä—Ö–∏–≤–∞
	streamID := "playbook_" + uuid.New().String()
	log.Printf("  üÜî Stream ID: %s", streamID)

	// –ï—Å–ª–∏ go2rtc –≤–∫–ª—é—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º SDP –æ—Ç–≤–µ—Ç
	if config.IsGo2RTCEnabled() {
		log.Printf("  ‚úÖ go2rtc –≤–∫–ª—é—á–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º WebRTC –æ—Ç–≤–µ—Ç")
		c.JSON(http.StatusOK, gin.H{
			"type":      "answer",
			"stream_id": streamID,
			"sdp":       generateDummySDP(),
		})
	} else {
		// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ go2rtc –æ—Ç–∫–ª—é—á–µ–Ω
		log.Printf("  ‚ùå go2rtc –æ—Ç–∫–ª—é—á–µ–Ω - WebRTC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
		c.JSON(http.StatusServiceUnavailable, gin.H{
			"error": "WebRTC —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞",
		})
	}
}

// GetSnapshot –ø–æ–ª—É—á–∞–µ—Ç —Å–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã
func GetSnapshot(c *gin.Context) {
	channelID := c.Param("channel")
	if channelID == "" {
		log.Printf("‚ùå –ó–∞–ø—Ä–æ—Å —Å–Ω–∏–º–∫–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ö–∞–Ω–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	channel := config.GetChannelByID(channelID)
	channelName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
	rtspURL := "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
	if channel != nil {
		channelName = channel.Name
		rtspURL = channel.URL
	}

	log.Printf("üì∏ –°–ù–ò–ú–û–ö - –ö–∞–Ω–∞–ª %s (%s)", channelID, channelName)
	log.Printf("  üåê RTSP –∏—Å—Ç–æ—á–Ω–∏–∫: %s", rtspURL)

	// –ü–æ–ª—É—á–∞–µ–º —Å–Ω–∏–º–æ–∫ —á–µ—Ä–µ–∑ Hikvision API
	imageData, err := hikvision.GetSnapshot(channelID)
	if err != nil {
		log.Printf("  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞: %v", err),
		})
		return
	}

	log.Printf("  ‚úÖ –°–Ω–∏–º–æ–∫ –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä: %d –±–∞–π—Ç", len(imageData))

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	c.Header("Content-Type", "image/jpeg")
	c.Header("Content-Length", strconv.Itoa(len(imageData)))
	c.Data(http.StatusOK, "image/jpeg", imageData)
}

// TestCameraConnection —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–º–µ—Ä–µ
func TestCameraConnection(c *gin.Context) {
	ip, username, _, port := config.GetHikvisionCredentials()

	log.Printf("üîç –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –∫ –∫–∞–º–µ—Ä–µ")
	log.Printf("  üåê IP: %s:%d", ip, port)
	log.Printf("  üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s", username)

	err := network.TestCameraConnection()
	if err != nil {
		log.Printf("  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
		c.JSON(http.StatusServiceUnavailable, gin.H{
			"status": "error",
			"error":  err.Error(),
		})
		return
	}

	log.Printf("  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–º–µ—Ä–µ —É—Å–ø–µ—à–Ω–æ")
	c.JSON(http.StatusOK, gin.H{
		"status":  "ok",
		"message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–º–µ—Ä–µ —É—Å–ø–µ—à–Ω–æ",
	})
}

// ProxyToGo2RTC –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ go2rtc
func ProxyToGo2RTC(c *gin.Context) {
	// –°–æ–∑–¥–∞–µ–º URL –¥–ª—è go2rtc
	targetURL := fmt.Sprintf("http://localhost:%d", config.GetGo2RTCPort())
	target, err := url.Parse(targetURL)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ go2rtc: %v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏"})
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
	originalPath := c.Request.URL.Path
	log.Printf("üîÑ –ü–†–û–ö–°–ò –∫ go2rtc: %s -> %s%s", originalPath, targetURL, strings.TrimPrefix(originalPath, "/api/go2rtc"))

	// –°–æ–∑–¥–∞–µ–º reverse proxy
	proxy := httputil.NewSingleHostReverseProxy(target)

	// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞
	c.Request.URL.Path = strings.TrimPrefix(originalPath, "/api/go2rtc")

	// –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
	proxy.ServeHTTP(c.Writer, c.Request)
}

// generateWebRTCSDP –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SDP –æ—Ç–≤–µ—Ç –¥–ª—è WebRTC
func generateWebRTCSDP(channelID string) string {
	return fmt.Sprintf(`v=0
o=- %d 0 IN IP4 127.0.0.1
s=TeleOko Stream %s
t=0 0
a=group:BUNDLE 0
a=msid-semantic: WMS
m=video 9 UDP/TLS/RTP/SAVPF 96
c=IN IP4 0.0.0.0
a=rtcp:9 IN IP4 0.0.0.0
a=ice-ufrag:teleoko%s
a=ice-pwd:teleoko%s123
a=fingerprint:sha-256 AA:BB:CC:DD:EE:FF:00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33:44:55:66:77:88:99
a=setup:actpass
a=mid:0
a=extmap:1 urn:ietf:params:rtp-hdrext:toffset
a=recvonly
a=rtpmap:96 VP8/90000
a=rtcp-fb:96 nack
a=rtcp-fb:96 nack pli
a=rtcp-fb:96 goog-remb`,
		time.Now().Unix(), channelID, channelID, channelID)
}

// generateDummySDP –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é –∑–∞–≥–ª—É—à–∫—É SDP –æ—Ç–≤–µ—Ç–∞
func generateDummySDP() string {
	return generateWebRTCSDP("default")
}
