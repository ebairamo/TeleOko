// internal/go2rtc/manager.go
package go2rtc

import (
	"TeleOko/internal/config"
	"archive/zip"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
	"time"
)

const (
	go2rtcVersion = "1.9.9"
	go2rtcRepo    = "AlexxIT/go2rtc"
)

// Manager —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º go2rtc
type Manager struct {
	process    *exec.Cmd
	configPath string
	binaryPath string
	isRunning  bool
}

var manager *Manager

// NewManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä go2rtc
func NewManager() *Manager {
	if manager == nil {
		manager = &Manager{
			configPath: "go2rtc.yaml",
			binaryPath: getGo2RTCBinaryPath(),
		}
	}
	return manager
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç go2rtc
func (m *Manager) Start() error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ go2rtc
	if !m.isBinaryExists() {
		log.Println("go2rtc –Ω–µ –Ω–∞–π–¥–µ–Ω")
		log.Println("üì• –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è:")
		log.Println("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: download-go2rtc.bat (—Ä—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)")
		log.Println("2. –°–∫–∞—á–∞–π—Ç–µ go2rtc.exe —Å https://github.com/AlexxIT/go2rtc/releases/latest")
		log.Println("3. –ò–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ go2rtc –≤ config.json: \"enabled\": false")

		// –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É –æ–¥–∏–Ω —Ä–∞–∑
		log.Println("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏...")
		if err := m.downloadGo2RTC(); err != nil {
			return fmt.Errorf("–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ go2rtc –Ω–µ —É–¥–∞–ª–∞—Å—å: %v\n\n"+
				"üõ†Ô∏è –†–µ—à–µ–Ω–∏–µ:\n"+
				"1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: download-go2rtc.bat\n"+
				"2. –ò–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ go2rtc.exe –≤—Ä—É—á–Ω—É—é —Å GitHub\n"+
				"3. –ò–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ go2rtc –≤ config.json", err)
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if err := m.createConfig(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ go2rtc: %v", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
	if err := m.startProcess(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ go2rtc: %v", err)
	}

	log.Println("‚úÖ go2rtc —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç go2rtc
func (m *Manager) Stop() error {
	if m.process != nil && m.isRunning {
		if err := m.process.Process.Kill(); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ go2rtc: %v", err)
		}
		m.isRunning = false
		log.Println("go2rtc –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}
	return nil
}

// IsRunning –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ go2rtc
func (m *Manager) IsRunning() bool {
	return m.isRunning
}

// GetAPIURL –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è API go2rtc
func (m *Manager) GetAPIURL() string {
	return fmt.Sprintf("http://localhost:%d", config.GetGo2RTCPort())
}

// isBinaryExists –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∏–Ω–∞—Ä–Ω–∏–∫ go2rtc
func (m *Manager) isBinaryExists() bool {
	_, err := os.Stat(m.binaryPath)
	return err == nil
}

// downloadGo2RTC –∑–∞–≥—Ä—É–∂–∞–µ—Ç go2rtc —Å GitHub
func (m *Manager) downloadGo2RTC() error {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –û–° –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL
	osName := runtime.GOOS
	archName := runtime.GOARCH

	// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
	var fileName string
	switch osName {
	case "windows":
		if archName == "amd64" {
			fileName = "go2rtc_windows_amd64.zip"
		} else if archName == "386" {
			fileName = "go2rtc_windows_386.zip"
		} else {
			return fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Windows: %s", archName)
		}
	case "darwin":
		if archName == "amd64" {
			fileName = "go2rtc_darwin_amd64.zip"
		} else if archName == "arm64" {
			fileName = "go2rtc_darwin_arm64.zip"
		} else {
			return fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ macOS: %s", archName)
		}
	case "linux":
		if archName == "amd64" {
			fileName = "go2rtc_linux_amd64"
		} else if archName == "arm64" {
			fileName = "go2rtc_linux_arm64"
		} else if archName == "arm" {
			fileName = "go2rtc_linux_armv6"
		} else {
			return fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ Linux: %s", archName)
		}
	default:
		return fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: %s", osName)
	}

	// –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏–π go2rtc –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
	versions := []string{go2rtcVersion, "1.9.8", "1.9.7"}

	for _, version := range versions {
		downloadURL := fmt.Sprintf("https://github.com/%s/releases/download/v%s/%s",
			go2rtcRepo, version, fileName)

		log.Printf("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ go2rtc v%s —Å %s", version, downloadURL)

		// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
		resp, err := http.Get(downloadURL)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
			continue
		}

		if resp.StatusCode != http.StatusOK {
			log.Printf("HTTP %d –¥–ª—è –≤–µ—Ä—Å–∏–∏ %s", resp.StatusCode, version)
			resp.Body.Close()
			continue
		}

		// –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
		defer resp.Body.Close()

		// –î–ª—è Windows –∏ macOS - —ç—Ç–æ ZIP —Ñ–∞–π–ª—ã, –¥–ª—è Linux - –±–∏–Ω–∞—Ä–Ω–∏–∫
		if strings.HasSuffix(fileName, ".zip") {
			return m.extractZip(resp.Body)
		} else {
			// –î–ª—è Linux - –ø—Ä—è–º–æ–π –±–∏–Ω–∞—Ä–Ω–∏–∫
			return m.saveBinary(resp.Body)
		}
	}

	return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å go2rtc –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–π –∏–∑ –≤–µ—Ä—Å–∏–π: %v", versions)
}

// extractZip –∏–∑–≤–ª–µ–∫–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ (Windows/macOS)
func (m *Manager) extractZip(reader io.Reader) error {
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è ZIP
	tempFile, err := os.CreateTemp("", "go2rtc_*.zip")
	if err != nil {
		return err
	}
	defer os.Remove(tempFile.Name())
	defer tempFile.Close()

	// –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
	_, err = io.Copy(tempFile, reader)
	if err != nil {
		return err
	}
	tempFile.Close()

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
	zipReader, err := zip.OpenReader(tempFile.Name())
	if err != nil {
		return err
	}
	defer zipReader.Close()

	// –ò—â–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª go2rtc
	var binaryName string
	if runtime.GOOS == "windows" {
		binaryName = "go2rtc.exe"
	} else {
		binaryName = "go2rtc"
	}

	for _, file := range zipReader.File {
		if strings.Contains(file.Name, binaryName) {
			// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–π–ª
			rc, err := file.Open()
			if err != nil {
				return err
			}
			defer rc.Close()

			// –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
			outFile, err := os.Create(m.binaryPath)
			if err != nil {
				return err
			}
			defer outFile.Close()

			// –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
			_, err = io.Copy(outFile, rc)
			if err != nil {
				return err
			}

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–Ω–µ Windows)
			if runtime.GOOS != "windows" {
				return os.Chmod(m.binaryPath, 0755)
			}
			return nil
		}
	}

	return fmt.Errorf("–∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª go2rtc –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ")
}

// saveBinary —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∏–Ω–∞—Ä–Ω–∏–∫ –Ω–∞–ø—Ä—è–º—É—é (Linux)
func (m *Manager) saveBinary(reader io.Reader) error {
	outFile, err := os.Create(m.binaryPath)
	if err != nil {
		return err
	}
	defer outFile.Close()

	_, err = io.Copy(outFile, reader)
	if err != nil {
		return err
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
	return os.Chmod(m.binaryPath, 0755)
}

// createConfig —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è go2rtc
func (m *Manager) createConfig() error {
	channels := config.GetChannels()

	configContent := "streams:\n"

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
	for _, channel := range channels {
		configContent += fmt.Sprintf("  %s: %s\n", channel.ID, channel.URL)
	}

	configContent += "\nwebrtc:\n"
	configContent += fmt.Sprintf("  listen: :%d\n", config.GetGo2RTCPort())
	configContent += "  candidates:\n"
	configContent += "    - stun:stun.l.google.com:19302\n"

	configContent += "\napi:\n"
	configContent += fmt.Sprintf("  listen: :%d\n", config.GetGo2RTCPort())

	return os.WriteFile(m.configPath, []byte(configContent), 0644)
}

// startProcess –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å go2rtc
func (m *Manager) startProcess() error {
	// –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ go2rtc
	absPath, err := filepath.Abs(m.binaryPath)
	if err != nil {
		// –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Å ./
		if runtime.GOOS == "windows" {
			absPath = ".\\go2rtc.exe"
		} else {
			absPath = "./go2rtc"
		}
	}

	log.Printf("üöÄ –ó–∞–ø—É—Å–∫ go2rtc: %s", absPath)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –ø—É—Ç–µ–º
	m.process = exec.Command(absPath, "-config", m.configPath)

	// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏
	m.process.Stdout = os.Stdout
	m.process.Stderr = os.Stderr

	if err := m.process.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å %s: %v", absPath, err)
	}

	m.isRunning = true

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
	time.Sleep(3 * time.Second)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
	if m.process.ProcessState != nil && m.process.ProcessState.Exited() {
		m.isRunning = false
		return fmt.Errorf("go2rtc –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞")
	}

	log.Printf("‚úÖ go2rtc –∑–∞–ø—É—â–µ–Ω (PID: %d)", m.process.Process.Pid)
	return nil
}

// getGo2RTCBinaryPath –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –±–∏–Ω–∞—Ä–Ω–∏–∫—É go2rtc
func getGo2RTCBinaryPath() string {
	if runtime.GOOS == "windows" {
		return "go2rtc.exe"
	}
	return "go2rtc"
}

// UpdateStreams –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫–∏ –≤ go2rtc
func (m *Manager) UpdateStreams() error {
	if !m.isRunning {
		return fmt.Errorf("go2rtc –Ω–µ –∑–∞–ø—É—â–µ–Ω")
	}

	// –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å API –≤—ã–∑–æ–≤—ã
	channels := config.GetChannels()
	log.Printf("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ %d –ø–æ—Ç–æ–∫–æ–≤ –≤ go2rtc", len(channels))

	return nil
}
