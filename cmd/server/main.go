// cmd/server/main.go
package main

import (
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"TeleOko/internal/config"
	"TeleOko/internal/go2rtc"
	"TeleOko/internal/handlers"

	"github.com/gin-gonic/gin"
)

func main() {
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ TeleOko - –°–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è")

	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}
	log.Println("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

	// –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
	ip, err := getLocalIP()
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		ip = "127.0.0.1"
	}
	log.Printf("üåê IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: %s", ip)

	// –ó–∞–ø—É—Å–∫ go2rtc –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
	var go2rtcManager *go2rtc.Manager
	if config.IsGo2RTCEnabled() {
		log.Println("üé• –ó–∞–ø—É—Å–∫ go2rtc...")
		go2rtcManager = go2rtc.NewManager()
		if err := go2rtcManager.Start(); err != nil {
			log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ go2rtc: %v", err)
		}
		log.Println("‚úÖ go2rtc —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫–∏
		time.Sleep(3 * time.Second) // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ go2rtc
		if err := go2rtcManager.UpdateStreams(); err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤: %v", err)
		}
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gin
	if os.Getenv("GIN_MODE") != "debug" {
		gin.SetMode(gin.ReleaseMode)
	}
	r := gin.Default()

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è WebRTC
	r.Use(func(c *gin.Context) {
		c.Header("Access-Control-Allow-Origin", "*")
		c.Header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		c.Header("Access-Control-Allow-Headers", "Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")

		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}

		c.Next()
	})

	// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ —à–∞–±–ª–æ–Ω—ã
	r.Static("/static", "./web/static")
	r.LoadHTMLGlob("web/templates/*")

	// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
	r.GET("/", func(c *gin.Context) {
		c.HTML(http.StatusOK, "index.html", gin.H{
			"ip":       ip,
			"channels": config.GetChannels(),
		})
	})

	// API –≥—Ä—É–ø–ø–∞
	api := r.Group("/api")
	{
		// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
		api.GET("/info", handlers.GetSystemInfo)

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		api.GET("/ping", func(c *gin.Context) {
			c.JSON(http.StatusOK, gin.H{"status": "ok", "timestamp": time.Now().Unix()})
		})

		// –†–∞–±–æ—Ç–∞ —Å –∫–∞–Ω–∞–ª–∞–º–∏
		api.GET("/channels", handlers.GetChannels)

		// –ü—Ä—è–º–æ–π —ç—Ñ–∏—Ä
		api.GET("/stream/:channel", handlers.GetLiveStream)
		api.POST("/webrtc/offer", handlers.HandleWebRTCOffer)

		// –ê—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
		api.GET("/recordings", handlers.GetRecordings)
		api.GET("/playback-url", handlers.GetPlaybackURL)
		api.POST("/webrtc/offer/playback", handlers.HandlePlaybackWebRTC)

		// –°–Ω–∏–º–∫–∏ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è)
		api.GET("/snapshot/:channel", handlers.GetSnapshot)

		// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–º–µ—Ä–µ
		api.GET("/test-connection", handlers.TestCameraConnection)

		// –ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ go2rtc
		if go2rtcManager != nil {
			api.Any("/go2rtc/*path", handlers.ProxyToGo2RTC)
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)
	go func() {
		<-c
		log.Println("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

		// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ go2rtc
		if go2rtcManager != nil {
			log.Println("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ go2rtc...")
			if err := go2rtcManager.Stop(); err != nil {
				log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ go2rtc: %v", err)
			}
		}

		log.Println("üëã TeleOko –∑–∞–≤–µ—Ä—à–µ–Ω")
		os.Exit(0)
	}()

	// –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
	log.Printf("üåç –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É %d", cfg.Server.Port)
	log.Printf("üîó –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:%d", cfg.Server.Port)
	log.Printf("üîó –ò–ª–∏ –ø–æ —Å–µ—Ç–∏: http://%s:%d", ip, cfg.Server.Port)

	if err := r.Run(fmt.Sprintf(":%d", cfg.Server.Port)); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}

// getLocalIP –ø–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π IP-–∞–¥—Ä–µ—Å
func getLocalIP() (string, error) {
	// –°–æ–∑–¥–∞–µ–º UDP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP
	conn, err := net.Dial("udp", "8.8.8.8:80")
	if err != nil {
		// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
		return getLocalIPFromInterfaces()
	}
	defer conn.Close()

	localAddr := conn.LocalAddr().(*net.UDPAddr)
	return localAddr.IP.String(), nil
}

// getLocalIPFromInterfaces –ø–æ–ª—É—á–∞–µ—Ç IP —á–µ—Ä–µ–∑ —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
func getLocalIPFromInterfaces() (string, error) {
	addrs, err := net.InterfaceAddrs()
	if err != nil {
		return "", err
	}

	for _, addr := range addrs {
		if ipnet, ok := addr.(*net.IPNet); ok && !ipnet.IP.IsLoopback() {
			if ipnet.IP.To4() != nil {
				return ipnet.IP.String(), nil
			}
		}
	}

	return "127.0.0.1", nil
}
